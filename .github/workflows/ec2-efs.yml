name: ec2-efs
on:
  pull_request:
    branches: [ "main" ]
  
  workflow_dispatch:
    inputs:
      operation:
        description: 'Selet Action you want to perform'
        required: true
        default: 'apply'
        type: choice
        options:
          - apply
          - destroy

defaults:
  run:
    working-directory: ec2-efs

permissions:
  pull-requests: write

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET }}

jobs:
  terraform:
    runs-on: ubuntu-latest
    if: inputs.operation == 'apply' || github.event_name == 'pull_request'
    steps:
    - uses: actions/checkout@v4
    - uses: hashicorp/setup-terraform@v3
    - name: debug
      run: |
        ls -al
    - name: Terraform fmt
      id: fmt
      run: terraform fmt -check
      continue-on-error: true
    
    - name: Terraform Init
      id: init
      run: terraform init
    
    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color
    
    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color
      continue-on-error: true
    
    - uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          // 1. Retrieve existing bot comments for the PR
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          })
          const botComment = comments.find(comment => {
            return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
          })

          // 2. Prepare format of the comment
          const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
          #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`
          <details><summary>Validation Output</summary>

          \`\`\`\n
          ${{ steps.validate.outputs.stdout }}
          \`\`\`

          </details>

          #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

          // 3. If we have a comment, update it, otherwise create a new one
          if (botComment) {
            github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: output
            })
          } else {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
          }
    - name: Terraform apply
      if: inputs.operation == 'apply' && github.event_name != 'pull_request'
      run: terraform apply --auto-approve
    
    - name: Python setup
      if: inputs.operation == 'apply' && github.event_name != 'pull_request'
      uses: actions/setup-python@v5
    
    - name: Ansible Install
      if: inputs.operation == 'apply' && github.event_name != 'pull_request'
      run: pip3 install ansible
    
    - name: prepare keyfile
      if: inputs.operation == 'apply' && github.event_name != 'pull_request'
      run: |
        terraform output -raw tls_private_key >> id_rsa.pem
        chmod 400 id_rsa.pem
        ls -al
        cat id_rsa.pem
      working-directory: ec2-efs/ansible

    - name: Ansible Playbook
      if: inputs.operation == 'apply' && github.event_name != 'pull_request'
      run: |
        ansible-playbook -i inventory.ini playbook.yml --ssh-common-args='-o StrictHostKeyChecking=no' --private-key=id_rsa.pem
      working-directory: ec2-efs/ansible
  
  terraform-destroy:
    runs-on: ubuntu-latest
    if: inputs.operation == 'destroy'
    steps:
    - uses: actions/checkout@v4
    - uses: hashicorp/setup-terraform@v3
    - run: terraform init
    - run: terraform destroy --auto-approve

